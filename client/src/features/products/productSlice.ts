import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { getProductsApi } from './productApis';

export interface Contact {
    product_id: number;
    product_name?: string;
    string?: string;
    product_number?: string;
}

export interface ContactsState {
    value: Array<Contact> | [];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: ContactsState = {
    value: [],
    status: 'idle',
};

export const getProductsAsync = createAsyncThunk(
    'api/products',
    async () => {
        const response: any = await getProductsApi();
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    }
);

export const contactsSlice = createSlice({
    name: 'products',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setProductList: (state, action) => {
            return {
                ...state,
                value: action.payload
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getProductsAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getProductsAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            })
            .addCase(getProductsAsync.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const selectContacts = (state: RootState) => state.ProductReducer.value;
export const contactsAsyncStatus = (state: RootState) => state.ProductReducer.status;


export default contactsSlice.reducer;